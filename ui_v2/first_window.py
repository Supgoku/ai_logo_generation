# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\first_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os

from PyQt5 import QtCore, QtGui, QtWidgets
from shapenet_loader import ShapeNetLoader
from second_window import Ui_MainWindow
from synonyms import Synonyms


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(300, 150)
        self.verticalLayout = QtWidgets.QVBoxLayout(Dialog)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label, 0, QtCore.Qt.AlignHCenter)
        self.text = QtWidgets.QLineEdit(Dialog)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.text.sizePolicy().hasHeightForWidth())
        self.text.setSizePolicy(sizePolicy)
        self.text.setObjectName("text")
        self.verticalLayout.addWidget(self.text)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.ok = QtWidgets.QPushButton(Dialog)
        self.ok.setObjectName("ok")
        self.horizontalLayout.addWidget(self.ok)
        self.clear = QtWidgets.QPushButton(Dialog)
        self.clear.setObjectName("clear")
        self.horizontalLayout.addWidget(self.clear)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.verticalLayout.addLayout(self.horizontalLayout)

        self.retranslateUi(Dialog)
        self.ok.clicked.connect(lambda: self.get_terms(self.text.text()))
        self.clear.clicked.connect(self.text.clear)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        self.dialog = Dialog

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label.setText(_translate("Dialog", "Terms"))
        self.ok.setText(_translate("Dialog", "OK"))
        self.clear.setText(_translate("Dialog", "Clear"))

    def get_terms(self, terms):
        noun_imgs_list = self.check_terms(terms)
        if noun_imgs_list:
            files = [entry for entry in os.scandir("images/") if entry.is_file()]
            exist = False
            term0 = self.term_list[0].lower()

            if noun_imgs_list:
                for f in files:
                    p = os.path.join(f).lower()
                    if self.term_list[0] in p:
                        exist = True
                        self.dialog.hide()
                        self.main_window_1 = QtWidgets.QMainWindow()
                        self.second_ui = Ui_MainWindow()
                        self.second_ui.setupUi(self.main_window_1, noun_imgs_list)
                        self.main_window_1.show()

            if not exist:
                error_dialog = QtWidgets.QErrorMessage()
                error_dialog.showMessage('No Synonym found for the noun (content) word or adjective (style) word. Please enter another list of terms.')
                error_dialog.exec_()


    def check_terms(self, terms):
        datadir = "shapenet"
        self.term_list = terms.split(" ")
        if len(self.term_list) < 2:
            error_dialog = QtWidgets.QErrorMessage()
            error_dialog.showMessage('Please enter two terms.')
            error_dialog.exec_()
            return None
        loader = ShapeNetLoader(datadir)
        loader.load()
        scored = loader.get_scored_results_for_term(self.term_list[1])
        synms_list = None
        if not scored:
            synms = Synonyms()
            synms_list = synms.get_synonyms(self.term_list[1])
        images_list = []

        if scored:
            for r in scored[:5]:
                temp = []
                for p in loader.get_image_paths_for_id(r.full_id):
                    temp.append(p)
                images_list.append(temp)

        else:
            for s in synms_list:
                scored = loader.get_scored_results_for_term(s)
                if scored:
                    for r in scored[:5]:
                        temp = []
                        for p in loader.get_image_paths_for_id(r.full_id):
                            temp.append(p)
                        images_list.append(temp)
                    break
            if not scored:
                return None
        return images_list

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
