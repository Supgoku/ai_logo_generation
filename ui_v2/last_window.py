# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\last_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import glob
import os

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QProcess
from PyQt5.QtGui import QIntValidator


class Ui_MainWindow(object):
    def setupUi(self, MainWindow, content_image, style_image):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(9, 9, 771, 531))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.horizontalLayoutWidget)
        self.plainTextEdit.setMaximumSize(QtCore.QSize(400, 600))
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.horizontalLayout.addWidget(self.plainTextEdit)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.generated_logo = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.generated_logo.setMaximumSize(QtCore.QSize(400, 400))
        self.generated_logo.setText("")
        self.generated_logo.setObjectName("generated_logo")
        self.verticalLayout.addWidget(self.generated_logo, 0, QtCore.Qt.AlignHCenter)
        self.label_2 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.label_2.setMaximumSize(QtCore.QSize(100, 35))
        self.label_2.setObjectName("text")
        self.label_2.setText("Text")
        self.verticalLayout.addWidget(self.label_2, 0, QtCore.Qt.AlignHCenter)
        self.lineEdit = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.lineEdit.setMaximumSize(QtCore.QSize(200, 30))
        self.lineEdit.setObjectName("lineEdit")
        self.verticalLayout.addWidget(self.lineEdit, 0, QtCore.Qt.AlignHCenter)
        self.combine_button = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.combine_button.setEnabled(False)
        self.combine_button.setMaximumSize(QtCore.QSize(120, 25))
        self.combine_button.setObjectName("combine_button")
        self.combine_button.setText("Combine")
        self.verticalLayout.addWidget(self.combine_button, 0, QtCore.Qt.AlignHCenter)
        # self.crop_button = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        # self.crop_button.setEnabled(False)
        # self.crop_button.setMaximumSize(QtCore.QSize(120, 25))
        # self.crop_button.setObjectName("crop_button")
        # self.crop_button.setText("Crop")
        # self.verticalLayout.addWidget(self.crop_button, 0, QtCore.Qt.AlignHCenter)
        self.horizontalLayout.addLayout(self.verticalLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.content_image = str(content_image).replace("\\", "/")
        self.style_image = str(style_image).replace("\\", "/")
        # self.plainTextEdit.setReadOnly(True)
        self.generated_logo.setScaledContents(True)
        # self.generated_logo.setPixmap(QtGui.QPixmap(os.path.join(self.content_image)))
        self.p = None
        self.content_filename = (self.content_image.split("/")[-1])[:-4]
        self.style_filename = (self.style_image.split("/")[-1])[:-4]

        self.retranslateUi(MainWindow)
        self.combine_button.clicked.connect(self.combine_logo_text)
        self.lineEdit.textChanged.connect(self.enableGenerate)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.start_crop_process()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))

    def crop_logo(self):
        self.start_crop_process()

    def start_crop_process(self):
        if self.p is None:
            if not os.path.exists('output/cropped_images'):
                os.makedirs('output/cropped_images')
            self.message("Cropping logo")
            self.p = QProcess()
            self.p.readyReadStandardOutput.connect(self.handle_stdout)
            self.p.readyReadStandardError.connect(self.handle_stderr)
            self.p.stateChanged.connect(self.handle_state)
            self.p.finished.connect(self.process_crop_finished)
            self.p.setProgram("python")
            cropped_img_path = "cropped_images/" + self.content_filename + ".png"
            print(self.content_image)
            self.p.setArguments(
                ["crop_image.py", '--CONTENT_IMAGE', self.content_image, '--CROPPED_IMAGE', 'cropped_images/' + self.content_filename + ".png"])
            self.p.start()

    def process_crop_finished(self):
        self.message("Process finished.")
        list_of_files = glob.glob('output/cropped_images/*')  # * means all if need specific format then *.csv
        try:
            self.content_image = max(list_of_files, key=os.path.getmtime)
            print(self.content_image)
            self.generated_logo.setScaledContents(True)
            self.generated_logo.setPixmap(QtGui.QPixmap(os.path.join(self.content_image)))
        except Exception as e:
            print(e)
        self.p = None
        self.start_process()

    def message(self, s):
        self.plainTextEdit.appendPlainText(s)

    def start_process(self, combine=False):
        if self.p is None and not combine:
            self.message("Style transferring")
            self.p = QProcess()
            self.p.readyReadStandardOutput.connect(self.handle_stdout)
            self.p.readyReadStandardError.connect(self.handle_stderr)
            self.p.stateChanged.connect(self.handle_state)
            self.p.finished.connect(self.process_finished)
            self.p.setProgram("python")
            print(self.style_image)
            self.p.setArguments(
                ["StyleTransfer.py", '--CONTENT_IMAGE', self.content_image, '--STYLE_IMAGE', self.style_image])
            self.p.start()
        elif combine:
            self.message("Combining logo and text")
            self.p = QProcess()
            self.p.readyReadStandardOutput.connect(self.handle_stdout)
            self.p.readyReadStandardError.connect(self.handle_stderr)
            self.p.stateChanged.connect(self.handle_state)
            self.p.finished.connect(lambda: self.process_finished(combine=True))
            list_of_files = glob.glob(
                'output/' + self.content_filename + "_vs_" + self.style_filename + "/*")
            latest_file = max(list_of_files, key=os.path.getmtime)
            self.p.setProgram("python")
            self.p.setArguments(
                ["image_and_type.py", '--image', os.path.join(latest_file), '--text', self.lineEdit.text()])
            self.p.start()

    def handle_stderr(self):
        data = self.p.readAllStandardError()
        stderr = bytes(data).decode("utf8")
        print(stderr)
        self.message(stderr)

    def handle_stdout(self):
        data = self.p.readAllStandardOutput()
        stdout = bytes(data).decode("utf8")
        if "Saved image file shape" in stdout:
            list_of_files = glob.glob(
                'output/' + self.content_filename + "_vs_" + self.style_filename + "/*")  # * means all if need specific format then *.csv
            try:
                latest_file = max(list_of_files, key=os.path.getmtime)
                print(latest_file)
                self.generated_logo.setScaledContents(True)
                self.generated_logo.setPixmap(QtGui.QPixmap(os.path.join(latest_file)))
                print("yes")
            except Exception as e:
                print(e)

        self.message(stdout)

    def handle_state(self, state):
        states = {
            QProcess.NotRunning: 'Not running',
            QProcess.Starting: 'Starting',
            QProcess.Running: 'Running',
        }
        state_name = states[state]
        self.message(f"State changed: {state_name}")

    def process_finished(self, combine=False):
        self.message("Process finished.")
        self.combine_button.setEnabled(True)
        # self.lineEdit.setReadOnly(False)
        if combine:
            list_of_files = glob.glob('logos/*')  # * means all if need specific format then *.csv
            try:
                self.logo = max(list_of_files, key=os.path.getmtime)
                self.generated_logo.setScaledContents(True)
                self.generated_logo.setPixmap(QtGui.QPixmap(os.path.join(self.logo)))
            except Exception as e:
                print(e)
        self.p = None

    def combine_logo_text(self):
        self.start_process(combine=True)

    def enableGenerate(self):
        pass
        # print(self.p)
        # if len(self.lineEdit.text()) > 0 and self.p is None:
        #     self.generate_button.setEnabled(True)
        # else:
        #     self.generate_button.setEnabled(False)

# if __name__ == "__main__":
#     import sys
#     app = QtWidgets.QApplication(sys.argv)
#     main_window = QtWidgets.QMainWindow()
#     ui = Ui_MainWindow()
#     ui.setupUi(main_window, "shapenet/screenshots/bfd96383a7b684b837a7774639dab343/bfd96383a7b684b837a7774639dab343-3.png", "images/zebra_1.jpg")
#     main_window.show()
#     sys.exit(app.exec_())
